name "odometry"
version '0.1'

import_types_from 'base'
using_library "odometry"
using_library "envire"

import_types_from 'odometry/Configuration.hpp'
import_types_from 'odometry/ContactState.hpp'
import_types_from 'odometry/BodyState.hpp'

typekit.export_types '/odometry/Configuration', '/odometry/BodyContactState'

task_context 'Generic' do
    abstract
    needs_configuration

    ##########################
    # configuration parameters 
    ##########################

    property('odometry_config', '/odometry/Configuration').
	doc 'configuration struct for the asguard odometry class'

    property('body_frame', '/std/string', 'body').
        doc "the frame name for the body frame"

    property('odometry_frame', '/std/string', 'odometry').
        doc "the frame name for the odometry frame"

    property('start_pose', '/base/samples/RigidBodyState').
        doc "starting position for odometry"

    ##########################
    # i/o ports 
    ##########################

    output_port('odometry_samples', '/base/samples/RigidBodyState').
	doc 'timestamped absolute odometry given in an arbitrary fixed frame'

    output_port('odometry_delta_samples', '/base/samples/RigidBodyState').
	doc 'timestamped odometry sample given as relative transformation since the last orientation sample. The transformation is from the current body frame to the previous frame.'

end

task_context 'LatOdom' do
    doc "Advanced skid-steering odometry for any number of omnidirectional skid steering wheels able to drive lateral"
    subclasses "Generic"

    ##########################
    # configuration parameters 
    ##########################

    property('wheelRadiusAvg', 'double').
        doc 'wheel radius avarage'

    property('trackWidth', 'double').
        doc 'track width'

    property('wheelBase', 'double').
        doc 'wheel base'

    property('leftWheelNames', 'std/vector<std/string>').
        doc 'left wheel jointnames'

    property('rightWheelNames', 'std/vector<std/string>').
        doc 'right wheel jointnames'
    
    property('leftSteeringNames', 'std/vector<std/string>').
        doc 'left steering jointnames'

    property('rightSteeringNames', 'std/vector<std/string>').
        doc 'right steering jointnames'
    

    ##########################
    # i/o ports 
    ##########################

    input_port('actuator_samples', '/base/samples/Joints').
        needs_reliable_connection.
        doc 'timestamped motor state samples providing also steering odometry information.'
       

    ##########################
    # aggregator parameters
    ##########################

    transformer() do
        transformation("imu_body", "imu_world")

        align_port("actuator_samples", 0.001)
        max_latency(0.1)
    end
    port_driven 'dynamic_transformations'
end

task_context 'Skid' do
    doc "normal skid-steering odometry for any number of skid steering wheels"
    subclasses "Generic"

    ##########################
    # configuration parameters 
    ##########################

    property('wheelRadiusAvg', 'double').
        doc 'wheel radius avarage'

    property('trackWidth', 'double').
        doc 'track width'

    property('wheelBase', 'double').
        doc 'wheel base'

    property('leftWheelNames', 'std/vector<std/string>').
        doc 'wheel base'

    property('rightWheelNames', 'std/vector<std/string>').
        doc 'wheel base'
        
    property('usePosition', 'bool').
        doc 'If this value is set to true, the position field of the actuator samples will be used to calculate the translation'


    ##########################
    # i/o ports 
    ##########################

    input_port('actuator_samples', '/base/samples/Joints').
        needs_reliable_connection.
        doc 'timestamped motor state samples providing odometry information.'


    ##########################
    # aggregator parameters
    ##########################

    transformer() do
        transformation("imu_body", "imu_world")

        align_port("actuator_samples", 0.001)
        max_latency(0.1)
    end
    port_driven 'dynamic_transformations'
end

task_context 'ContactPointTask' do
    doc "contact-point odometry"
    subclasses "Generic"

    ##########################
    # i/o ports 
    ##########################

    input_port('contact_samples', '/odometry/BodyContactState').
        needs_reliable_connection.
	doc 'samples providing information on the contact of the body with the environment'

    ##########################
    # aggregator parameters
    ##########################

    transformer() do
	transform("body", "imu_enu")

	align_port("contact_samples", 0.01) 
	max_latency(0.1)
	transform_priority(10)
    end

    port_driven 'dynamic_transformations'
end

